{"name": "Successful close of ingredient detail window by click on \"X\" button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 127\nCurrent browser version is 131.0.6778.86 with binary path C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF7F3C09642+30946]\n\t(No symbol) [0x00007FF7F3BBE3D9]\n\t(No symbol) [0x00007FF7F3AB6FDA]\n\t(No symbol) [0x00007FF7F3AF7341]\n\t(No symbol) [0x00007FF7F3AF6598]\n\t(No symbol) [0x00007FF7F3AF148D]\n\t(No symbol) [0x00007FF7F3AEC4FA]\n\t(No symbol) [0x00007FF7F3B378B9]\n\t(No symbol) [0x00007FF7F3B36F20]\n\t(No symbol) [0x00007FF7F3B2C813]\n\t(No symbol) [0x00007FF7F3AFA6E5]\n\t(No symbol) [0x00007FF7F3AFB021]\n\tGetHandleVerifier [0x00007FF7F3D3F84D+1301229]\n\tGetHandleVerifier [0x00007FF7F3D4BDC7+1351783]\n\tGetHandleVerifier [0x00007FF7F3D42A13+1313971]\n\tGetHandleVerifier [0x00007FF7F3C3DD16+245686]\n\t(No symbol) [0x00007FF7F3BC759F]\n\t(No symbol) [0x00007FF7F3BC3814]\n\t(No symbol) [0x00007FF7F3BC39A2]\n\t(No symbol) [0x00007FF7F3BBA3FF]\n\tBaseThreadInitThunk [0x00007FFDB85C7374+20]\n\tRtlUserThreadStart [0x00007FFDB8E1CC91+33]", "trace": "request = <SubRequest 'driver' for <Function test_close_ingredient_detail_window[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\", \"firefox\"])\n    def driver(request):\n        if request.param == \"chrome\":\n>           driver = webdriver.Chrome()\n\nconftest.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:241: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:329: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EEE31C4410>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF7F3BBA3FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDB85C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFDB8E1CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 127\nE       Current browser version is 131.0.6778.86 with binary path C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7F3C09642+30946]\nE       \t(No symbol) [0x00007FF7F3BBE3D9]\nE       \t(No symbol) [0x00007FF7F3AB6FDA]\nE       \t(No symbol) [0x00007FF7F3AF7341]\nE       \t(No symbol) [0x00007FF7F3AF6598]\nE       \t(No symbol) [0x00007FF7F3AF148D]\nE       \t(No symbol) [0x00007FF7F3AEC4FA]\nE       \t(No symbol) [0x00007FF7F3B378B9]\nE       \t(No symbol) [0x00007FF7F3B36F20]\nE       \t(No symbol) [0x00007FF7F3B2C813]\nE       \t(No symbol) [0x00007FF7F3AFA6E5]\nE       \t(No symbol) [0x00007FF7F3AFB021]\nE       \tGetHandleVerifier [0x00007FF7F3D3F84D+1301229]\nE       \tGetHandleVerifier [0x00007FF7F3D4BDC7+1351783]\nE       \tGetHandleVerifier [0x00007FF7F3D42A13+1313971]\nE       \tGetHandleVerifier [0x00007FF7F3C3DD16+245686]\nE       \t(No symbol) [0x00007FF7F3BC759F]\nE       \t(No symbol) [0x00007FF7F3BC3814]\nE       \t(No symbol) [0x00007FF7F3BC39A2]\nE       \t(No symbol) [0x00007FF7F3BBA3FF]\nE       \tBaseThreadInitThunk [0x00007FFDB85C7374+20]\nE       \tRtlUserThreadStart [0x00007FFDB8E1CC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "153108f3-68b6-444c-bda9-bbce41be294d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1732722534055, "stop": 1732722534055, "uuid": "46735905-cba2-498a-9ae3-a01649ba84bb", "historyId": "9ebcbf898d6484c5404afd24b395bdf7", "testCaseId": "1af414d115fce8558030cd1e8211251f", "fullName": "tests.test_main_functional.TestMainFunctional#test_close_ingredient_detail_window", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_functional"}, {"name": "subSuite", "value": "TestMainFunctional"}, {"name": "host", "value": "ast24help1c2"}, {"name": "thread", "value": "15448-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_functional"}]}
{"name": "Fresh order appears in orders progress list", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\">...</p> is not clickable at point (1500, 44). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=131.0.6778.86)\nStacktrace:\n\tGetHandleVerifier [0x00007FF610992775+28773]\n\t(No symbol) [0x00007FF6108FAFB0]\n\t(No symbol) [0x00007FF61079552A]\n\t(No symbol) [0x00007FF6107F0B5E]\n\t(No symbol) [0x00007FF6107EE5FC]\n\t(No symbol) [0x00007FF6107EB7E6]\n\t(No symbol) [0x00007FF6107EA741]\n\t(No symbol) [0x00007FF6107DC970]\n\t(No symbol) [0x00007FF61080EF9A]\n\t(No symbol) [0x00007FF6107DC1C6]\n\t(No symbol) [0x00007FF61080F1B0]\n\t(No symbol) [0x00007FF61082F1A4]\n\t(No symbol) [0x00007FF61080ED43]\n\t(No symbol) [0x00007FF6107DA548]\n\t(No symbol) [0x00007FF6107DB6B1]\n\tGetHandleVerifier [0x00007FF610CBF45D+3358029]\n\tGetHandleVerifier [0x00007FF610CD430D+3443709]\n\tGetHandleVerifier [0x00007FF610CC83FD+3394797]\n\tGetHandleVerifier [0x00007FF610A5929B+842635]\n\t(No symbol) [0x00007FF61090654F]\n\t(No symbol) [0x00007FF610901FA4]\n\t(No symbol) [0x00007FF61090213D]\n\t(No symbol) [0x00007FF6108F1629]\n\tBaseThreadInitThunk [0x00007FFDB85C7374+20]\n\tRtlUserThreadStart [0x00007FFDB8E1CC91+33]", "trace": "main_page = <pages.main_page.MainPage object at 0x000001925E3236E0>, login_page = <pages.login_page.LoginPage object at 0x000001925E322AE0>\npersonal_account_page = <pages.personal_account_page.PersonalAccountPage object at 0x000001925E323A40>\ncreate_user = [{'email': 'test1488amandamorris@example.org', 'name': 'test1488John Roth', 'password': '3$0NRso9Ad'}, 'test1488amanda...mY0OWVkMjgwMDAxYjUyN2YwNSIsImlhdCI6MTczMjg1MTQ0NCwiZXhwIjoxNzMyODUyNjQ0fQ.fns5AUD5MmsOWSYyPkhLKze1I3-LvlJb5FLrGT7zF30']\n\n    @pytest.fixture\n    def authorization_by_new_user(main_page, login_page, personal_account_page, create_user):\n        main_page.main_page_loading_wait()\n        main_page.press_personal_account_button()\n        login_page.wait_till_login_page_loaded()\n        login_page.fill_authorization_fields_then_login(create_user[1], create_user[2])\n>       main_page.press_personal_account_button()\n\nconftest.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:19: in press_personal_account_button\n    self.click_on_element_with_wait(MainPageLocators.PERSONAL_ACCOUNT_BUTTON)\npages\\base_page.py:36: in click_on_element_with_wait\n    self.click_on_element(locator)\npages\\base_page.py:31: in click_on_element\n    element.click()\nC:\\pythton\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\pythton\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\pythton\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001925E322840>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6108F1629]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDB85C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFDB8E1CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\">...</p> is not clickable at point (1500, 44). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=131.0.6778.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF610992775+28773]\nE       \t(No symbol) [0x00007FF6108FAFB0]\nE       \t(No symbol) [0x00007FF61079552A]\nE       \t(No symbol) [0x00007FF6107F0B5E]\nE       \t(No symbol) [0x00007FF6107EE5FC]\nE       \t(No symbol) [0x00007FF6107EB7E6]\nE       \t(No symbol) [0x00007FF6107EA741]\nE       \t(No symbol) [0x00007FF6107DC970]\nE       \t(No symbol) [0x00007FF61080EF9A]\nE       \t(No symbol) [0x00007FF6107DC1C6]\nE       \t(No symbol) [0x00007FF61080F1B0]\nE       \t(No symbol) [0x00007FF61082F1A4]\nE       \t(No symbol) [0x00007FF61080ED43]\nE       \t(No symbol) [0x00007FF6107DA548]\nE       \t(No symbol) [0x00007FF6107DB6B1]\nE       \tGetHandleVerifier [0x00007FF610CBF45D+3358029]\nE       \tGetHandleVerifier [0x00007FF610CD430D+3443709]\nE       \tGetHandleVerifier [0x00007FF610CC83FD+3394797]\nE       \tGetHandleVerifier [0x00007FF610A5929B+842635]\nE       \t(No symbol) [0x00007FF61090654F]\nE       \t(No symbol) [0x00007FF610901FA4]\nE       \t(No symbol) [0x00007FF61090213D]\nE       \t(No symbol) [0x00007FF6108F1629]\nE       \tBaseThreadInitThunk [0x00007FFDB85C7374+20]\nE       \tRtlUserThreadStart [0x00007FFDB8E1CC91+33]\n\nC:\\pythton\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1732851427786, "stop": 1732851427786, "uuid": "6cfed0ec-3254-41b5-890d-bcafee6ba81d", "historyId": "db962eab52bff7158ae1b9f53cfc6235", "testCaseId": "d3f5103a08bf0c99c38ebd2ee02c05e9", "fullName": "tests.test_feed_page.TestFeedPage#test_check_order_id_in_progress_list", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_feed_page"}, {"name": "subSuite", "value": "TestFeedPage"}, {"name": "host", "value": "ast24help1c2"}, {"name": "thread", "value": "13296-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_feed_page"}]}